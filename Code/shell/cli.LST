C51 COMPILER V9.01   CLI                                                                   10/08/2018 08:24:22 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CLI
OBJECT MODULE PLACED IN cli.OBJ
COMPILER INVOKED BY: C:\Tool\KeilC_8051\C51\BIN\C51.EXE cli.c OMF2 BROWSE DEBUG

line level    source

   1          #include "cli.h"
   2          
   3          cli_t* head_cmd = NULL ;
   4          cli_t* current_cmd = NULL;
   5          
   6          void test_callback(char argc,char** argv)
   7          {
   8   1      //      uart_send_str("\nTest function callback!\n");
   9   1              
  10   1              cli_t* temp_cmd = head_cmd;
  11   1      
  12   1              char i = 48;
  13   1              while(temp_cmd != NULL)
  14   1              {
  15   2                      i++;
  16   2                      uart_send_byte(i);
  17   2                      uart_send_str("\n\r");
  18   2                      uart_send_str(temp_cmd->cmd);
  19   2                      uart_send_str("\n\r");
  20   2      
  21   2                      temp_cmd = temp_cmd->next_cmd;
  22   2              }                       
  23   1      }
*** WARNING C280 IN LINE 6 OF CLI.C: 'argc': unreferenced local variable
*** WARNING C280 IN LINE 6 OF CLI.C: 'argv': unreferenced local variable
  24          
  25          void help(unsigned char argc, unsigned char** argv)
  26          {
  27   1              cli_t* temp_cmd = head_cmd;
  28   1      
  29   1              while(temp_cmd != NULL)
  30   1              {
  31   2                      if(argc == 0)
  32   2                      {
  33   3                              uart_send_str(temp_cmd->cmd);
  34   3                              uart_send_str("\n\r\t");
  35   3                              uart_send_str((char*)temp_cmd->num_parameter);
  36   3                              uart_send_str("\n\r");                          
  37   3                      }
  38   2                      else
  39   2                      {
  40   3                              uart_send_str(temp_cmd->cmd);
  41   3                              uart_send_str("\n\r\t");
  42   3                              uart_send_str((char*)temp_cmd->num_parameter);
  43   3                              uart_send_str("\n\r");
  44   3      
  45   3                              break;
  46   3                      }
  47   2      
  48   2                      temp_cmd = temp_cmd->next_cmd;
  49   2              }
  50   1      
  51   1      }
*** WARNING C280 IN LINE 25 OF CLI.C: 'argv': unreferenced local variable
  52          void cli_init(void)
C51 COMPILER V9.01   CLI                                                                   10/08/2018 08:24:22 PAGE 2   

  53          {
  54   1              unsigned int  num_input = 0;
  55   1              const char* help_command = "help";
  56   1              cli_t* command = (cli_t*)malloc(sizeof(cli_t));
  57   1              
  58   1      
  59   1              if(command == NULL)      /* if cannot allocate memmory */
  60   1              {
  61   2                      uart_send_str("Memmory overflow !\n");
  62   2                      while(1);
  63   2              }
  64   1      /*************************  DEBUG ****************************/
  65   1      #if 1
  66   1              uart_send_str("\n\r1.CLI::cli_init()\n\rhelp_command: ");
  67   1              uart_send_str(help_command);
  68   1              uart_send_str("\n\r\n\r");
  69   1      #endif
  70   1      /************************************************************/
  71   1      
  72   1      
  73   1      /***  
  74   1      * after run underneath code , CODE begin error
  75   1      ***/    
  76   1              command->cmd = help_command;
  77   1      
  78   1      /*************************  DEBUG ****************************/
  79   1      #if 1
  80   1              uart_send_str("\n\r1.CLI::cli_init()\n\rhelp_command: ");
  81   1              uart_send_str(help_command);
  82   1              uart_send_str("\n\r\n\r");
  83   1      #endif
  84   1      /************************************************************/  
  85   1              
  86   1      /*************************  DEBUG ****************************/ 
  87   1      #if 1
  88   1              uart_send_str("\n\r2.CLI::cli_init()\n\rcommand->cmd: ");
  89   1              uart_send_str(command->cmd);
  90   1              uart_send_str("\n\r\n\r");
  91   1      #endif
  92   1      /************************************************************/
  93   1              
  94   1              command->num_parameter = 0;
  95   1              command->callback = help;
  96   1              command->next_cmd = NULL;
  97   1              
  98   1              head_cmd = command;
  99   1              current_cmd = command;
 100   1              
 101   1      }
 102          
 103          void cli_add(cli_t* list_cmd, unsigned char num_cmd)
 104          {
 105   1              unsigned char i = 0;
 106   1              cli_t *new_node = (cli_t*)malloc(sizeof(cli_t));
 107   1              
 108   1      /*************************  DEBUG ****************************/
 109   1      #if 1
 110   1              uart_send_str("\n\r4.CLI::cli_add()\n\rcurrent_cmd: ");
 111   1              uart_send_str(current_cmd->cmd);
 112   1              uart_send_str("\n\r\n\r");
 113   1      #endif
 114   1      /************************************************************/
C51 COMPILER V9.01   CLI                                                                   10/08/2018 08:24:22 PAGE 3   

 115   1              for(i=0; i< num_cmd; i++)
 116   1              {
 117   2                      
 118   2      /*************************  DEBUG ****************************/         
 119   2      #if 1
 120   2              uart_send_byte(i+48);
 121   2              uart_send_str("\n\r***.CLI::cli_add()\n\rlist_cmd[i]: ");
 122   2              uart_send_str(list_cmd[i].cmd);
 123   2              uart_send_str("\n\r\n\r");
 124   2      #endif
 125   2      /************************************************************/          
 126   2                      
 127   2                      /* Make new node */
 128   2                      new_node->cmd = list_cmd[i].cmd;
 129   2                      new_node->num_parameter = list_cmd[i].num_parameter;
 130   2                      new_node->callback = list_cmd[i].callback;
 131   2      
 132   2                      current_cmd->next_cmd = new_node;
 133   2                      current_cmd = current_cmd->next_cmd;
 134   2                      current_cmd->next_cmd = NULL;
 135   2                      
 136   2      #if 1
 137   2                      uart_send_byte(i+48);
 138   2                      uart_send_str("\n\r***.CLI::cli_add()\n\rcurrent_cmd: ");
 139   2                      uart_send_str(current_cmd->next_cmd->cmd);
 140   2                      uart_send_str("\n\r\n\r");
 141   2      #endif  
 142   2                      
 143   2              }
 144   1      
 145   1      }
 146          /* 
 147           * function : parse_cli
 148           * parameter :  function take 2 parameter, 
 149           *                              unsigned char* buffer, that is string command of user trasmit through Terminal 
 150           *                              unsigned char len_buffer, lengh of command
 151           * brief : *function is not written finish*
 152          */
 153          void parse_cli(unsigned char* buffer, unsigned char len_buffer)
 154          {
 155   1              cli_t* temp_cmd = head_cmd;
 156   1              unsigned char* temp_str = NULL;
 157   1              unsigned char** input_parameter;
 158   1              unsigned char num_input = 0;
 159   1      
 160   1              temp_str = strtok(buffer,DELIMITED);
 161   1      
 162   1              #if 1
 163   1              uart_send_str("\n\rCLI :: parse_cli()\n\rhead_cmd : ");
 164   1              uart_send_str(head_cmd->cmd);
 165   1              uart_send_str("\n\r\n\r");
 166   1              #endif
 167   1              
 168   1              while(temp_cmd != NULL)
 169   1              {
 170   2                      if(!strcmp(temp_cmd->cmd, temp_str))   /* if found function */
 171   2                      {
 172   3                              input_parameter = (unsigned char**)malloc(sizeof(unsigned int) * temp_cmd->num_parameter);
 173   3                              num_input = 0;
 174   3                              temp_str = strtok(NULL,DELIMITED);
 175   3                              while(temp_str != NULL)
 176   3                              {
C51 COMPILER V9.01   CLI                                                                   10/08/2018 08:24:22 PAGE 4   

 177   4                                      if(num_input > temp_cmd->num_parameter)
 178   4                                      {
 179   5                                              break;
 180   5                                      }
 181   4                                      else
 182   4                                      {
 183   5                                              input_parameter[num_input] = temp_str;
 184   5                                              num_input++;
 185   5                                              temp_str = strtok(NULL,DELIMITED);
 186   5                                      }       
 187   4                              }
 188   3                              break;
 189   3                      }
 190   2                      temp_cmd = temp_cmd->next_cmd;
 191   2              }
 192   1      
 193   1              if(temp_cmd != NULL)   /* If have this function */
 194   1              {
 195   2                 if(num_input == temp_cmd->num_parameter)     /* if syntax of function is correct */
 196   2                 {
 197   3                        temp_cmd->callback(num_input,input_parameter);
 198   3                 }
 199   2                 else
 200   2                 {
 201   3                              uart_send_str("! ERROR : syntax error !\n");
 202   3                 }
 203   2              
 204   2              }
 205   1              else
 206   1              {
 207   2                      uart_send_str("! ERROR : Function not exist !\n");
 208   2              }
 209   1      
 210   1      }
*** WARNING C280 IN LINE 153 OF CLI.C: 'len_buffer': unreferenced local variable
 211          /* 
 212           * function : prepare_cli
 213           * parameter : char rx_data that is data is received from RX uart
 214           * return : function return 1 if rx_data is enter (ascii == 13), else return 0
 215           * brief :       
 216          */
 217          char prepare_cli(char rx_data)
 218          {
 219   1              char result = 0;
 220   1              if(rx_data == 13)
 221   1              {
 222   2                      /* Command Process*/
 223   2                      parse_cli(buffer,write_index);
 224   2                      write_index = 0;
 225   2                      memset(buffer,0,BUFFER_SIZE);
 226   2      
 227   2                      result = 1;
 228   2              }
 229   1              else if(rx_data == 8)
 230   1              {
 231   2                      if(write_index >0)
 232   2                      {
 233   3                              write_index-- ;
 234   3                              buffer[write_index] = 0;
 235   3                      }
 236   2              }
 237   1              else
C51 COMPILER V9.01   CLI                                                                   10/08/2018 08:24:22 PAGE 5   

 238   1              {
 239   2                      buffer[write_index] = rx_data;
 240   2                      write_index++ ;
 241   2              }
 242   1              return result;  
 243   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1257    ----
   CONSTANT SIZE    =    310    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      46
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
