C51 COMPILER V9.01   CLI                                                                   10/08/2018 15:13:27 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CLI
OBJECT MODULE PLACED IN cli.OBJ
COMPILER INVOKED BY: C:\Tool\KeilC_8051\C51\BIN\C51.EXE cli.c OMF2 BROWSE DEBUG

line level    source

   1          #include "cli.h"
   2          
   3          cli_t* head_cmd = NULL ;
   4          cli_t* current_cmd = NULL;
   5          cli_t command ;
   6          void test_callback(char argc,char** argv)
   7          {
   8   1      //      uart_send_str("\nTest function callback!\n");
   9   1              
  10   1              cli_t* temp_cmd = head_cmd;
  11   1      
  12   1              char i = 48;
  13   1              while(temp_cmd != NULL)
  14   1              {
  15   2                      i++;
  16   2                      uart_send_byte(i);
  17   2                      uart_send_str("\n\r");
  18   2                      uart_send_str(temp_cmd->cmd);
  19   2                      uart_send_str("\n\r");
  20   2      
  21   2                      temp_cmd = temp_cmd->next_cmd;
  22   2              }                       
  23   1      }
*** WARNING C280 IN LINE 6 OF CLI.C: 'argc': unreferenced local variable
*** WARNING C280 IN LINE 6 OF CLI.C: 'argv': unreferenced local variable
  24          
  25          void help(unsigned char argc, unsigned char** argv)
  26          {
  27   1              cli_t* temp_cmd = head_cmd;
  28   1      
  29   1              while(temp_cmd != NULL)
  30   1              {
  31   2                      if(argc == 0)
  32   2                      {
  33   3                              uart_send_str(temp_cmd->cmd);
  34   3                              uart_send_str("\n\r");                          
  35   3                      }
  36   2                      else
  37   2                      {
  38   3                              if(!strcmp(argv[0],temp_cmd->cmd))
  39   3                              {                       
  40   4                                      uart_send_str(temp_cmd->cmd);
  41   4                                      uart_send_str("\n\r");
  42   4                              }
  43   3                              break;
  44   3                      }
  45   2      
  46   2                      temp_cmd = temp_cmd->next_cmd;
  47   2              }
  48   1      
  49   1      }
  50          
  51          void cli_init(void)
  52          {
  53   1              command.cmd = "help";   
C51 COMPILER V9.01   CLI                                                                   10/08/2018 15:13:27 PAGE 2   

  54   1              command.num_parameter = 0;
  55   1              command.callback = help;
  56   1              command.next_cmd = NULL;
  57   1              
  58   1              head_cmd = &command;
  59   1              current_cmd = &command;
  60   1      }
  61          
  62          void cli_add(cli_t* list_cmd, unsigned char num_cmd)
  63          {
  64   1              unsigned char i = 0;
  65   1              
  66   1              for(i=0; i< num_cmd; i++)
  67   1              {               
  68   2                      current_cmd->next_cmd = &list_cmd[i];
  69   2                      current_cmd = current_cmd->next_cmd;
  70   2                      current_cmd->next_cmd = NULL;
  71   2              }
  72   1      }
  73          /* 
  74           * function : parse_cli
  75           * parameter :  function take 2 parameter, 
  76           *                              unsigned char* buffer, that is string command of user trasmit through Terminal 
  77           *                              unsigned char len_buffer, lengh of command
  78           * brief : *function is not written finish*
  79          */
  80          void parse_cli(unsigned char* buffer, unsigned char len_buffer)
  81          {
  82   1              cli_t* temp_cmd = head_cmd;
  83   1              unsigned char* temp_str = NULL;
  84   1              unsigned char* input_parameter[5];
  85   1              unsigned char num_input = 0;
  86   1      
  87   1              temp_str = strtok(buffer,DELIMITED);
  88   1              
  89   1              while(temp_cmd != NULL)
  90   1              {
  91   2                      if(!strcmp(temp_cmd->cmd, temp_str))   /* if found function */
  92   2                      {
  93   3                              num_input = 0;
  94   3                              temp_str = strtok(NULL,DELIMITED);
  95   3                              while(temp_str != NULL)
  96   3                              {
  97   4                                      if(num_input > temp_cmd->num_parameter)
  98   4                                      {
  99   5                                              break;
 100   5                                      }
 101   4                                      else
 102   4                                      {
 103   5                                              input_parameter[num_input] = temp_str;
 104   5                                              num_input++;
 105   5                                              temp_str = strtok(NULL,DELIMITED);
 106   5                                      }       
 107   4                              }
 108   3                              break;
 109   3                      }
 110   2                      temp_cmd = temp_cmd->next_cmd;
 111   2              }
 112   1      
 113   1              if(temp_cmd != NULL)   /* If have this function */
 114   1              {
 115   2                      if(!strcmp("help",temp_cmd->cmd))
C51 COMPILER V9.01   CLI                                                                   10/08/2018 15:13:27 PAGE 3   

 116   2                      {
 117   3                              temp_cmd->callback(num_input,input_parameter);
 118   3                      }
 119   2                      else if(num_input == temp_cmd->num_parameter)   /* if syntax of function is correct */
 120   2                      {
 121   3                              temp_cmd->callback(num_input,input_parameter);
 122   3                      }
 123   2                      else
 124   2                      {
 125   3                              uart_send_str("! ERROR : syntax error !\n");
 126   3                      }
 127   2              
 128   2              }
 129   1              else
 130   1              {
 131   2                      uart_send_str("! ERROR : Function not exist !\n");
 132   2              }
 133   1      
 134   1      }
*** WARNING C280 IN LINE 80 OF CLI.C: 'len_buffer': unreferenced local variable
 135          /* 
 136           * function : prepare_cli
 137           * parameter : char rx_data that is data is received from RX uart
 138           * return : function return 1 if rx_data is enter (ascii == 13), else return 0
 139           * brief :       
 140          */
 141          char prepare_cli(char rx_data)
 142          {
 143   1              char result = 0;
 144   1              if(rx_data == 13)
 145   1              {
 146   2                      /* Command Process*/
 147   2                      parse_cli(buffer,write_index);
 148   2                      write_index = 0;
 149   2                      memset(buffer,0,BUFFER_SIZE);
 150   2      
 151   2                      result = 1;
 152   2              }
 153   1              else if(rx_data == 8)
 154   1              {
 155   2                      if(write_index >0)
 156   2                      {
 157   3                              write_index-- ;
 158   3                              buffer[write_index] = 0;
 159   3                      }
 160   2              }
 161   1              else
 162   1              {
 163   2                      buffer[write_index] = rx_data;
 164   2                      write_index++ ;
 165   2              }
 166   1              return result;  
 167   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    750    ----
   CONSTANT SIZE    =     69    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      47
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.01   CLI                                                                   10/08/2018 15:13:27 PAGE 4   

   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
